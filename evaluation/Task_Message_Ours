Imagine you are a robot assistance AI. You help to manage a mobile ground rescue robot. Translate the given task description to a list of tasks and constraints using the task pattern [{'task':'affordance', 'type':'affordance_type', 'entity':{'type': 'entity_type', 'super_type': 'entity_super_type', 'id: 'optional, integer', 'location': 'optional, string'}},
{'task': 'goto', 'entity':{'type': 'entity_type', 'super_type': 'entity_super_type', 'id: 'optional', 'location': 'optional'}},
{'task':'goto', 'x':'x-position', 'y':'y-position', 'z':'z-position', 'yaw':'yaw in radians'}, {'task':'unknown', 'description':'description goes here'}]

Please not that the id is always a number and the super_type is either object, room or connection. Combine strings with _ instead of spaces. Location and ids are optional, only add them if they are correctly provided.
. For the constraints use the constraint pattern [{'constraint': 'disallow_modes', 'modes': ['assisted', 'autonomous', 'teleop']}, 
{'constraint': 'disallow_modes', 'modes': ['assisted', 'autonomous', 'teleop']}
{'constraint': 'disallow_affordance_modes', 'affordance_type': 'affordance_type', 'modes': ['assisted', 'autonomous', 'teleop']},
{'constraint': 'disallow_entity_affordance', 'affordance_type': 'affordance_type', 'entity':{'type': 'entity_type', 'super_type': 'entity_super_type', 'id: 'optional, integer', 'location': 'optional, string'}} 
{'constraint': 'disallow_entity_affordance_modes', 'affordance_type': 'affordance_type, 'modes': ['assisted', 'autonomous', 'teleop'], 'entity':{'type': 'entity_type', 'super_type': 'entity_super_type', 'id: 'optional, integer', 'location': 'optional, string'}},
{'constraint': 'disallow_entity', 'entity':{'type': 'entity_type', 'super_type': 'entity_super_type', 'id: 'optional, integer', 'location': 'optional, string'}},
{'constraint': 'disallow_affordance', 'affordance_type': 'affordance_type''}}
]

The modes and affordance modes are 'assisted', 'autonomous' and 'teleop'.

disallow_modes disables the specified modes to be used by the robot.

disallow_affordance_modes is used to disables specific modes to be used by the robot for a specified affordance. 

disallow_entity_affordances is used to disable specific affordances of a specific entity to be used by the robot.

disallow_entity_affordance_modes disables specific modes for a specified affordance and entity to which the affordance belongs to.

disallow_rooms disallows the robot to enter rooms specified matching the provided room entities.

disallow_objects disallows the robot to interact with objects matching the provided object entities.

disallow_affordance disables the use of the provided affordances for the robot.

Please not that the id is always a number and the super_type is either object or room. Combine strings with _ instead of spaces. Location and ids are optional, only add them if they are correctly provided.
.

Return a list of tasks and a list of provided constraints as python dict {'tasks': [], 'constraints': []} 
Example: 'go to the red pumpkin in room 1'
Result: {tasks: [{'task':'goto', 'entity':{'type': 'pumpkin', 'super_type': 'object', 'color':'red', 'location':'room 1'}}], 'constraints': []}

Possible task types are goto, inspect, measure_hazard, search, communicate and traverse.
Possible entities are room, table, shelf, victim, door, container and cupboard.

Example: 'open door 1'
Result: {'tasks': [{'task':'affordance', 'type':'open', 'entity':{'type': 'door', 'super_type': 'object', 'id': 1}}], 'constraints': []}

Example: 'flitge door 1'
Result: {'tasks': [{'task':'unknown', 'description':'flitge door 1'}], 'constraints': []}

Example: 'inspect the hazmat sign'
Result: {'tasks': [{'task: 'affordance', 'type': 'inspect', 'entity': {'type': 'hazmat_sign', 'super_type': 'object'}}], 'constraints': []}

Example: 'go to room 4, but don't use autonomous functions'
Result: {tasks: [{'task':'goto', 'entity':{'type': 'room', 'super_type': 'room', 'id': 4}}], 'constraints': [{'constraint': 'disallow_modes', 'modes': ['autonomous']}]}

Example: 'go to room 1, but don't do traverse autonomously'
Result: {tasks: [{'task':'goto', 'entity':{'type': 'room', 'super_type': 'room', 'id': 1}}], 'constraints': [{'constraint': 'disallow_affordance_modes', 'affordance_type': 'traverse', 'modes': ['autonomous']}]}

Example: 'traverse connection 1'
Result: {tasks: [{'task': 'affordance', 'type': 'traverse', 'entity': {'type': 'connection', 'super_type': 'connection'}}], 'constraints': []}

Example: 'go to the fire_extinguisher, but don't traverse door 5'
Result: {tasks: [{'task':'goto', 'entity':{'type': 'fire_extinguisher', 'super_type': 'object'}}], 'constraints': [{'constraint': 'disallow_entity_affordance', 'affordance_type': 'traverse', 'entity':{'type': 'door', 'super_type': 'object', 'id': 5}}]}

Example: 'go to the fire_extinguisher, but don't traverse or open door 5'
Result: {tasks: [{'task':'goto', 'entity':{'type': 'fire_extinguisher', 'super_type': 'object'}}], 'constraints': [{'constraint': 'disallow_entity_affordance', 'affordance_type': 'traverse', 'entity':{'type': 'door', 'super_type': 'object', 'id': 5}}, {'constraint': 'disallow_entity_affordance', 'affordance_type': 'open', 'entity':{'type': 'door', 'super_type': 'object', 'id': 5}}]}

Example: 'go to the fire_extinguisher, but don't traverse doors autonomously'
Result: {tasks: [{'task':'goto', 'entity':{'type': 'fire_extinguisher', 'super_type': 'object'}}], 'constraints': [{'constraint': 'disallow_entity_affordance_modes', 'affordance_type': 'traverse', 'modes': ['autonomous'], 'entity':{'type': 'door', 'super_type': 'object'}}]}

Example: 'inspect the hazmat sign, but don't go through room 5'
Result: {'tasks': [{'task: 'affordance', 'type': 'inspect', 'entity': {'type': 'hazmat_sign', 'super_type': 'object'}}], 'constraints': [{'constraint': 'disallow_entity', 'entity': {'type': 'room', 'super_type': 'room', 'id': 5}}]}

Example: 'don't use doors. Inspect the hazmat sign'
Result: {'tasks': [{'task: 'affordance', 'type': 'inspect', 'entity': {'type': 'hazmat_sign', 'super_type': 'object'}}], 'constraints': [{'constraint': 'disallow_entity', 'entity': {'type': 'door', 'super_type': 'object'}]}

Example: 'pick up a bottle, but don't traverse'
Result: {'tasks': [{'task: 'affordance', 'type': 'pick_up', 'entity': {'type': 'bottle', 'super_type': 'object'}}], 'constraints': [{'constraint': 'disallow_affordance', 'affordance_type': 'traverse']}

only return the list of tasks and list of constraints as valid python lists together in a valid python dictionary. Only one dictionary, no additional explanations.

